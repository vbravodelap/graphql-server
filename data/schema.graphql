type Cliente {
        id: ID
        nombre: String
        apellido: String
        empresa: String
        emails: [Email]
        edad: Int
        tipo: TipoCliente
        pedidos: [Pedido]
    }

    type Email {
        email: String
    }

    type Producto {
        id: ID
        nombre: String!
        precio: Int!
        stock: Int!
    }

    type Pedido {
        id: ID
        pedido: [PedidoProducto]
        total: Int
        fecha: String
        cliente: ID
        estado: EstadoPedido
    }

    type PedidoProducto {
        id: ID
        cantidad: Int
    }

    enum TipoCliente {
        BASICO
        PREMIUM
    }

    enum EstadoPedido {
        PENDIENTE
        COMPLETADO
        CANCELADO
    }

    type Query {
        getClientes(limite: Int, offset: Int) : [Cliente]
        getCliente(id: ID): Cliente
        totalClientes : String

        #productos
        obtenerProductos(limite: Int, offset: Int) : [Producto]
        obtenerProducto(id: ID!) : Producto
        totalProductos : String
    }

    input EmailInput{
        email: String
    }

    input ClienteInput{
        id: ID
        nombre: String!
        apellido: String!
        empresa: String!
        emails: [EmailInput]
        edad: Int
        tipo: TipoCliente!
        pedidos: [PedidoInput]
    }

    input PedidoInput {
        id: ID
        pedido: [PedidoProductoInput]
        total: Int
        fecha: String
        cliente: ID
        estado: EstadoPedido
    }

    input PedidoProductoInput {
        id: ID
        cantidad: Int
    }

    input ProductoInput {
        id: ID
        nombre: String!
        precio: Int!
        stock: Int!
    }

    type Mutation {
        crearCliente(input: ClienteInput) : Cliente
        actualizarCliente(input: ClienteInput) : Cliente
        eliminarCliente(id: ID!) : String

        #productos
        nuevoProducto(input: ProductoInput) : Producto
        actualizarProducto(input: ProductoInput) : Producto
        eliminarProducto(id: ID!) : String
        nuevoPedido(input: PedidoInput) : Pedido
    }